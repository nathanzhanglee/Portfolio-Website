"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/selderee";
exports.ids = ["vendor-chunks/selderee"];
exports.modules = {

/***/ "(action-browser)/./node_modules/selderee/lib/selderee.cjs":
/*!************************************************!*\
  !*** ./node_modules/selderee/lib/selderee.cjs ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar parseley = __webpack_require__(/*! parseley */ \"(action-browser)/./node_modules/parseley/lib/parseley.cjs\");\nfunction _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function(k) {\n            if (k !== \"default\") {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function() {\n                        return e[k];\n                    }\n                });\n            }\n        });\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n}\nvar parseley__namespace = /*#__PURE__*/ _interopNamespace(parseley);\nvar Ast = /*#__PURE__*/ Object.freeze({\n    __proto__: null\n});\nvar Types = /*#__PURE__*/ Object.freeze({\n    __proto__: null\n});\nconst treeify = (nodes)=>\"▽\\n\" + treeifyArray(nodes, thinLines);\nconst thinLines = [\n    [\n        \"├─\",\n        \"│ \"\n    ],\n    [\n        \"└─\",\n        \"  \"\n    ]\n];\nconst heavyLines = [\n    [\n        \"┠─\",\n        \"┃ \"\n    ],\n    [\n        \"┖─\",\n        \"  \"\n    ]\n];\nconst doubleLines = [\n    [\n        \"╟─\",\n        \"║ \"\n    ],\n    [\n        \"╙─\",\n        \"  \"\n    ]\n];\nfunction treeifyArray(nodes, tpl = heavyLines) {\n    return prefixItems(tpl, nodes.map((n)=>treeifyNode(n)));\n}\nfunction treeifyNode(node) {\n    switch(node.type){\n        case \"terminal\":\n            {\n                const vctr = node.valueContainer;\n                return `◁ #${vctr.index} ${JSON.stringify(vctr.specificity)} ${vctr.value}`;\n            }\n        case \"tagName\":\n            return `◻ Tag name\\n${treeifyArray(node.variants, doubleLines)}`;\n        case \"attrValue\":\n            return `▣ Attr value: ${node.name}\\n${treeifyArray(node.matchers, doubleLines)}`;\n        case \"attrPresence\":\n            return `◨ Attr presence: ${node.name}\\n${treeifyArray(node.cont)}`;\n        case \"pushElement\":\n            return `◉ Push element: ${node.combinator}\\n${treeifyArray(node.cont, thinLines)}`;\n        case \"popElement\":\n            return `◌ Pop element\\n${treeifyArray(node.cont, thinLines)}`;\n        case \"variant\":\n            return `◇ = ${node.value}\\n${treeifyArray(node.cont)}`;\n        case \"matcher\":\n            return `◈ ${node.matcher} \"${node.value}\"${node.modifier || \"\"}\\n${treeifyArray(node.cont)}`;\n    }\n}\nfunction prefixItems(tpl, items) {\n    return items.map((item, i, { length })=>prefixItem(tpl, item, i === length - 1)).join(\"\\n\");\n}\nfunction prefixItem(tpl, item, tail = true) {\n    const tpl1 = tpl[tail ? 1 : 0];\n    return tpl1[0] + item.split(\"\\n\").join(\"\\n\" + tpl1[1]);\n}\nvar TreeifyBuilder = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    treeify: treeify\n});\nclass DecisionTree {\n    constructor(input){\n        this.branches = weave(toAstTerminalPairs(input));\n    }\n    build(builder) {\n        return builder(this.branches);\n    }\n}\nfunction toAstTerminalPairs(array) {\n    const len = array.length;\n    const results = new Array(len);\n    for(let i = 0; i < len; i++){\n        const [selectorString, val] = array[i];\n        const ast = preprocess(parseley__namespace.parse1(selectorString));\n        results[i] = {\n            ast: ast,\n            terminal: {\n                type: \"terminal\",\n                valueContainer: {\n                    index: i,\n                    value: val,\n                    specificity: ast.specificity\n                }\n            }\n        };\n    }\n    return results;\n}\nfunction preprocess(ast) {\n    reduceSelectorVariants(ast);\n    parseley__namespace.normalize(ast);\n    return ast;\n}\nfunction reduceSelectorVariants(ast) {\n    const newList = [];\n    ast.list.forEach((sel)=>{\n        switch(sel.type){\n            case \"class\":\n                newList.push({\n                    matcher: \"~=\",\n                    modifier: null,\n                    name: \"class\",\n                    namespace: null,\n                    specificity: sel.specificity,\n                    type: \"attrValue\",\n                    value: sel.name\n                });\n                break;\n            case \"id\":\n                newList.push({\n                    matcher: \"=\",\n                    modifier: null,\n                    name: \"id\",\n                    namespace: null,\n                    specificity: sel.specificity,\n                    type: \"attrValue\",\n                    value: sel.name\n                });\n                break;\n            case \"combinator\":\n                reduceSelectorVariants(sel.left);\n                newList.push(sel);\n                break;\n            case \"universal\":\n                break;\n            default:\n                newList.push(sel);\n                break;\n        }\n    });\n    ast.list = newList;\n}\nfunction weave(items) {\n    const branches = [];\n    while(items.length){\n        const topKind = findTopKey(items, (sel)=>true, getSelectorKind);\n        const { matches, nonmatches, empty } = breakByKind(items, topKind);\n        items = nonmatches;\n        if (matches.length) {\n            branches.push(branchOfKind(topKind, matches));\n        }\n        if (empty.length) {\n            branches.push(...terminate(empty));\n        }\n    }\n    return branches;\n}\nfunction terminate(items) {\n    const results = [];\n    for (const item of items){\n        const terminal = item.terminal;\n        if (terminal.type === \"terminal\") {\n            results.push(terminal);\n        } else {\n            const { matches, rest } = partition(terminal.cont, (node)=>node.type === \"terminal\");\n            matches.forEach((node)=>results.push(node));\n            if (rest.length) {\n                terminal.cont = rest;\n                results.push(terminal);\n            }\n        }\n    }\n    return results;\n}\nfunction breakByKind(items, selectedKind) {\n    const matches = [];\n    const nonmatches = [];\n    const empty = [];\n    for (const item of items){\n        const simpsels = item.ast.list;\n        if (simpsels.length) {\n            const isMatch = simpsels.some((node)=>getSelectorKind(node) === selectedKind);\n            (isMatch ? matches : nonmatches).push(item);\n        } else {\n            empty.push(item);\n        }\n    }\n    return {\n        matches,\n        nonmatches,\n        empty\n    };\n}\nfunction getSelectorKind(sel) {\n    switch(sel.type){\n        case \"attrPresence\":\n            return `attrPresence ${sel.name}`;\n        case \"attrValue\":\n            return `attrValue ${sel.name}`;\n        case \"combinator\":\n            return `combinator ${sel.combinator}`;\n        default:\n            return sel.type;\n    }\n}\nfunction branchOfKind(kind, items) {\n    if (kind === \"tag\") {\n        return tagNameBranch(items);\n    }\n    if (kind.startsWith(\"attrValue \")) {\n        return attrValueBranch(kind.substring(10), items);\n    }\n    if (kind.startsWith(\"attrPresence \")) {\n        return attrPresenceBranch(kind.substring(13), items);\n    }\n    if (kind === \"combinator >\") {\n        return combinatorBranch(\">\", items);\n    }\n    if (kind === \"combinator +\") {\n        return combinatorBranch(\"+\", items);\n    }\n    throw new Error(`Unsupported selector kind: ${kind}`);\n}\nfunction tagNameBranch(items) {\n    const groups = spliceAndGroup(items, (x)=>x.type === \"tag\", (x)=>x.name);\n    const variants = Object.entries(groups).map(([name, group])=>({\n            type: \"variant\",\n            value: name,\n            cont: weave(group.items)\n        }));\n    return {\n        type: \"tagName\",\n        variants: variants\n    };\n}\nfunction attrPresenceBranch(name, items) {\n    for (const item of items){\n        spliceSimpleSelector(item, (x)=>x.type === \"attrPresence\" && x.name === name);\n    }\n    return {\n        type: \"attrPresence\",\n        name: name,\n        cont: weave(items)\n    };\n}\nfunction attrValueBranch(name, items) {\n    const groups = spliceAndGroup(items, (x)=>x.type === \"attrValue\" && x.name === name, (x)=>`${x.matcher} ${x.modifier || \"\"} ${x.value}`);\n    const matchers = [];\n    for (const group of Object.values(groups)){\n        const sel = group.oneSimpleSelector;\n        const predicate = getAttrPredicate(sel);\n        const continuation = weave(group.items);\n        matchers.push({\n            type: \"matcher\",\n            matcher: sel.matcher,\n            modifier: sel.modifier,\n            value: sel.value,\n            predicate: predicate,\n            cont: continuation\n        });\n    }\n    return {\n        type: \"attrValue\",\n        name: name,\n        matchers: matchers\n    };\n}\nfunction getAttrPredicate(sel) {\n    if (sel.modifier === \"i\") {\n        const expected = sel.value.toLowerCase();\n        switch(sel.matcher){\n            case \"=\":\n                return (actual)=>expected === actual.toLowerCase();\n            case \"~=\":\n                return (actual)=>actual.toLowerCase().split(/[ \\t]+/).includes(expected);\n            case \"^=\":\n                return (actual)=>actual.toLowerCase().startsWith(expected);\n            case \"$=\":\n                return (actual)=>actual.toLowerCase().endsWith(expected);\n            case \"*=\":\n                return (actual)=>actual.toLowerCase().includes(expected);\n            case \"|=\":\n                return (actual)=>{\n                    const lower = actual.toLowerCase();\n                    return expected === lower || lower.startsWith(expected) && lower[expected.length] === \"-\";\n                };\n        }\n    } else {\n        const expected = sel.value;\n        switch(sel.matcher){\n            case \"=\":\n                return (actual)=>expected === actual;\n            case \"~=\":\n                return (actual)=>actual.split(/[ \\t]+/).includes(expected);\n            case \"^=\":\n                return (actual)=>actual.startsWith(expected);\n            case \"$=\":\n                return (actual)=>actual.endsWith(expected);\n            case \"*=\":\n                return (actual)=>actual.includes(expected);\n            case \"|=\":\n                return (actual)=>expected === actual || actual.startsWith(expected) && actual[expected.length] === \"-\";\n        }\n    }\n}\nfunction combinatorBranch(combinator, items) {\n    const groups = spliceAndGroup(items, (x)=>x.type === \"combinator\" && x.combinator === combinator, (x)=>parseley__namespace.serialize(x.left));\n    const leftItems = [];\n    for (const group of Object.values(groups)){\n        const rightCont = weave(group.items);\n        const leftAst = group.oneSimpleSelector.left;\n        leftItems.push({\n            ast: leftAst,\n            terminal: {\n                type: \"popElement\",\n                cont: rightCont\n            }\n        });\n    }\n    return {\n        type: \"pushElement\",\n        combinator: combinator,\n        cont: weave(leftItems)\n    };\n}\nfunction spliceAndGroup(items, predicate, keyCallback) {\n    const groups = {};\n    while(items.length){\n        const bestKey = findTopKey(items, predicate, keyCallback);\n        const bestKeyPredicate = (sel)=>predicate(sel) && keyCallback(sel) === bestKey;\n        const hasBestKeyPredicate = (item)=>item.ast.list.some(bestKeyPredicate);\n        const { matches, rest } = partition1(items, hasBestKeyPredicate);\n        let oneSimpleSelector = null;\n        for (const item of matches){\n            const splicedNode = spliceSimpleSelector(item, bestKeyPredicate);\n            if (!oneSimpleSelector) {\n                oneSimpleSelector = splicedNode;\n            }\n        }\n        if (oneSimpleSelector == null) {\n            throw new Error(\"No simple selector is found.\");\n        }\n        groups[bestKey] = {\n            oneSimpleSelector: oneSimpleSelector,\n            items: matches\n        };\n        items = rest;\n    }\n    return groups;\n}\nfunction spliceSimpleSelector(item, predicate) {\n    const simpsels = item.ast.list;\n    const matches = new Array(simpsels.length);\n    let firstIndex = -1;\n    for(let i = simpsels.length; i-- > 0;){\n        if (predicate(simpsels[i])) {\n            matches[i] = true;\n            firstIndex = i;\n        }\n    }\n    if (firstIndex == -1) {\n        throw new Error(`Couldn't find the required simple selector.`);\n    }\n    const result = simpsels[firstIndex];\n    item.ast.list = simpsels.filter((sel, i)=>!matches[i]);\n    return result;\n}\nfunction findTopKey(items, predicate, keyCallback) {\n    const candidates = {};\n    for (const item of items){\n        const candidates1 = {};\n        for (const node of item.ast.list.filter(predicate)){\n            candidates1[keyCallback(node)] = true;\n        }\n        for (const key of Object.keys(candidates1)){\n            if (candidates[key]) {\n                candidates[key]++;\n            } else {\n                candidates[key] = 1;\n            }\n        }\n    }\n    let topKind = \"\";\n    let topCounter = 0;\n    for (const entry of Object.entries(candidates)){\n        if (entry[1] > topCounter) {\n            topKind = entry[0];\n            topCounter = entry[1];\n        }\n    }\n    return topKind;\n}\nfunction partition(src, predicate) {\n    const matches = [];\n    const rest = [];\n    for (const x of src){\n        if (predicate(x)) {\n            matches.push(x);\n        } else {\n            rest.push(x);\n        }\n    }\n    return {\n        matches,\n        rest\n    };\n}\nfunction partition1(src, predicate) {\n    const matches = [];\n    const rest = [];\n    for (const x of src){\n        if (predicate(x)) {\n            matches.push(x);\n        } else {\n            rest.push(x);\n        }\n    }\n    return {\n        matches,\n        rest\n    };\n}\nclass Picker {\n    constructor(f){\n        this.f = f;\n    }\n    pickAll(el) {\n        return this.f(el);\n    }\n    pick1(el, preferFirst = false) {\n        const results = this.f(el);\n        const len = results.length;\n        if (len === 0) {\n            return null;\n        }\n        if (len === 1) {\n            return results[0].value;\n        }\n        const comparator = preferFirst ? comparatorPreferFirst : comparatorPreferLast;\n        let result = results[0];\n        for(let i = 1; i < len; i++){\n            const next = results[i];\n            if (comparator(result, next)) {\n                result = next;\n            }\n        }\n        return result.value;\n    }\n}\nfunction comparatorPreferFirst(acc, next) {\n    const diff = parseley.compareSpecificity(next.specificity, acc.specificity);\n    return diff > 0 || diff === 0 && next.index < acc.index;\n}\nfunction comparatorPreferLast(acc, next) {\n    const diff = parseley.compareSpecificity(next.specificity, acc.specificity);\n    return diff > 0 || diff === 0 && next.index > acc.index;\n}\nexports.Ast = Ast;\nexports.DecisionTree = DecisionTree;\nexports.Picker = Picker;\nexports.Treeify = TreeifyBuilder;\nexports.Types = Types;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/selderee/lib/selderee.cjs\n");

/***/ })

};
;