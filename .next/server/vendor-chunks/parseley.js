"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/parseley";
exports.ids = ["vendor-chunks/parseley"];
exports.modules = {

/***/ "(action-browser)/./node_modules/parseley/lib/parseley.cjs":
/*!************************************************!*\
  !*** ./node_modules/parseley/lib/parseley.cjs ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar leac = __webpack_require__(/*! leac */ \"(action-browser)/./node_modules/leac/lib/leac.cjs\");\nvar p = __webpack_require__(/*! peberminta */ \"(action-browser)/./node_modules/peberminta/lib/core.cjs\");\nfunction _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function(k) {\n            if (k !== \"default\") {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function() {\n                        return e[k];\n                    }\n                });\n            }\n        });\n    }\n    n[\"default\"] = e;\n    return Object.freeze(n);\n}\nvar p__namespace = /*#__PURE__*/ _interopNamespace(p);\nvar ast = /*#__PURE__*/ Object.freeze({\n    __proto__: null\n});\nconst lex = leac.createLexer([\n    {\n        name: \"ws\",\n        regex: /[ \\t\\r\\n\\f]+/\n    },\n    {\n        name: \"idn\",\n        regex: /[a-zA-Z_-][a-zA-Z0-9_-]*/\n    },\n    {\n        name: \"#id\",\n        regex: /#[a-zA-Z0-9_-]+/\n    },\n    {\n        name: \"str1\",\n        regex: /'(?:\\\\['\\\\]|[^\\n'\\\\])*'/\n    },\n    {\n        name: \"str2\",\n        regex: /\"(?:\\\\[\"\\\\]|[^\\n\"\\\\])*\"/\n    },\n    {\n        name: \"*\"\n    },\n    {\n        name: \".\"\n    },\n    {\n        name: \",\"\n    },\n    {\n        name: \"[\"\n    },\n    {\n        name: \"]\"\n    },\n    {\n        name: \"=\"\n    },\n    {\n        name: \">\"\n    },\n    {\n        name: \"|\"\n    },\n    {\n        name: \"+\"\n    },\n    {\n        name: \"~\"\n    },\n    {\n        name: \"^\"\n    },\n    {\n        name: \"$\"\n    }\n]);\nfunction sumSpec([a0, a1, a2], [b0, b1, b2]) {\n    return [\n        a0 + b0,\n        a1 + b1,\n        a2 + b2\n    ];\n}\nfunction sumAllSpec(ss) {\n    return ss.reduce(sumSpec, [\n        0,\n        0,\n        0\n    ]);\n}\nfunction literal(name) {\n    return p__namespace.token((t)=>t.name === name ? true : undefined);\n}\nconst whitespace_ = p__namespace.token((t)=>t.name === \"ws\" ? null : undefined);\nconst optionalWhitespace_ = p__namespace.option(whitespace_, null);\nfunction optionallySpaced(parser) {\n    return p__namespace.middle(optionalWhitespace_, parser, optionalWhitespace_);\n}\nconst identifier_ = p__namespace.token((t)=>t.name === \"idn\" ? t.text : undefined);\nconst hashId_ = p__namespace.token((t)=>t.name === \"#id\" ? t.text.slice(1) : undefined);\nconst string_ = p__namespace.token((t)=>t.name.startsWith(\"str\") ? t.text.slice(1, -1) : undefined);\nconst namespace_ = p__namespace.left(p__namespace.option(identifier_, \"\"), literal(\"|\"));\nconst qualifiedName_ = p__namespace.eitherOr(p__namespace.ab(namespace_, identifier_, (ns, name)=>({\n        name: name,\n        namespace: ns\n    })), p__namespace.map(identifier_, (name)=>({\n        name: name,\n        namespace: null\n    })));\nconst uniSelector_ = p__namespace.eitherOr(p__namespace.ab(namespace_, literal(\"*\"), (ns)=>({\n        type: \"universal\",\n        namespace: ns,\n        specificity: [\n            0,\n            0,\n            0\n        ]\n    })), p__namespace.map(literal(\"*\"), ()=>({\n        type: \"universal\",\n        namespace: null,\n        specificity: [\n            0,\n            0,\n            0\n        ]\n    })));\nconst tagSelector_ = p__namespace.map(qualifiedName_, ({ name, namespace })=>({\n        type: \"tag\",\n        name: name,\n        namespace: namespace,\n        specificity: [\n            0,\n            0,\n            1\n        ]\n    }));\nconst classSelector_ = p__namespace.ab(literal(\".\"), identifier_, (fullstop, name)=>({\n        type: \"class\",\n        name: name,\n        specificity: [\n            0,\n            1,\n            0\n        ]\n    }));\nconst idSelector_ = p__namespace.map(hashId_, (name)=>({\n        type: \"id\",\n        name: name,\n        specificity: [\n            1,\n            0,\n            0\n        ]\n    }));\nconst attrModifier_ = p__namespace.token((t)=>{\n    if (t.name === \"idn\") {\n        if (t.text === \"i\" || t.text === \"I\") {\n            return \"i\";\n        }\n        if (t.text === \"s\" || t.text === \"S\") {\n            return \"s\";\n        }\n    }\n    return undefined;\n});\nconst attrValue_ = p__namespace.eitherOr(p__namespace.ab(string_, p__namespace.option(p__namespace.right(optionalWhitespace_, attrModifier_), null), (v, mod)=>({\n        value: v,\n        modifier: mod\n    })), p__namespace.ab(identifier_, p__namespace.option(p__namespace.right(whitespace_, attrModifier_), null), (v, mod)=>({\n        value: v,\n        modifier: mod\n    })));\nconst attrMatcher_ = p__namespace.choice(p__namespace.map(literal(\"=\"), ()=>\"=\"), p__namespace.ab(literal(\"~\"), literal(\"=\"), ()=>\"~=\"), p__namespace.ab(literal(\"|\"), literal(\"=\"), ()=>\"|=\"), p__namespace.ab(literal(\"^\"), literal(\"=\"), ()=>\"^=\"), p__namespace.ab(literal(\"$\"), literal(\"=\"), ()=>\"$=\"), p__namespace.ab(literal(\"*\"), literal(\"=\"), ()=>\"*=\"));\nconst attrPresenceSelector_ = p__namespace.abc(literal(\"[\"), optionallySpaced(qualifiedName_), literal(\"]\"), (lbr, { name, namespace })=>({\n        type: \"attrPresence\",\n        name: name,\n        namespace: namespace,\n        specificity: [\n            0,\n            1,\n            0\n        ]\n    }));\nconst attrValueSelector_ = p__namespace.middle(literal(\"[\"), p__namespace.abc(optionallySpaced(qualifiedName_), attrMatcher_, optionallySpaced(attrValue_), ({ name, namespace }, matcher, { value, modifier })=>({\n        type: \"attrValue\",\n        name: name,\n        namespace: namespace,\n        matcher: matcher,\n        value: value,\n        modifier: modifier,\n        specificity: [\n            0,\n            1,\n            0\n        ]\n    })), literal(\"]\"));\nconst attrSelector_ = p__namespace.eitherOr(attrPresenceSelector_, attrValueSelector_);\nconst typeSelector_ = p__namespace.eitherOr(uniSelector_, tagSelector_);\nconst subclassSelector_ = p__namespace.choice(idSelector_, classSelector_, attrSelector_);\nconst compoundSelector_ = p__namespace.map(p__namespace.eitherOr(p__namespace.flatten(typeSelector_, p__namespace.many(subclassSelector_)), p__namespace.many1(subclassSelector_)), (ss)=>{\n    return {\n        type: \"compound\",\n        list: ss,\n        specificity: sumAllSpec(ss.map((s)=>s.specificity))\n    };\n});\nconst combinator_ = p__namespace.choice(p__namespace.map(literal(\">\"), ()=>\">\"), p__namespace.map(literal(\"+\"), ()=>\"+\"), p__namespace.map(literal(\"~\"), ()=>\"~\"), p__namespace.ab(literal(\"|\"), literal(\"|\"), ()=>\"||\"));\nconst combinatorSeparator_ = p__namespace.eitherOr(optionallySpaced(combinator_), p__namespace.map(whitespace_, ()=>\" \"));\nconst complexSelector_ = p__namespace.leftAssoc2(compoundSelector_, p__namespace.map(combinatorSeparator_, (c)=>(left, right)=>({\n            type: \"compound\",\n            list: [\n                ...right.list,\n                {\n                    type: \"combinator\",\n                    combinator: c,\n                    left: left,\n                    specificity: left.specificity\n                }\n            ],\n            specificity: sumSpec(left.specificity, right.specificity)\n        })), compoundSelector_);\nconst listSelector_ = p__namespace.leftAssoc2(p__namespace.map(complexSelector_, (s)=>({\n        type: \"list\",\n        list: [\n            s\n        ]\n    })), p__namespace.map(optionallySpaced(literal(\",\")), ()=>(acc, next)=>({\n            type: \"list\",\n            list: [\n                ...acc.list,\n                next\n            ]\n        })), complexSelector_);\nfunction parse_(parser, str) {\n    const lexerResult = lex(str);\n    if (!lexerResult.complete) {\n        throw new Error(`The input \"${str}\" was only partially tokenized, stopped at offset ${lexerResult.offset}!\\n` + prettyPrintPosition(str, lexerResult.offset));\n    }\n    const result = optionallySpaced(parser)({\n        tokens: lexerResult.tokens,\n        options: undefined\n    }, 0);\n    if (!result.matched) {\n        throw new Error(`No match for \"${str}\" input!`);\n    }\n    if (result.position < lexerResult.tokens.length) {\n        const token = lexerResult.tokens[result.position];\n        throw new Error(`The input \"${str}\" was only partially parsed, stopped at offset ${token.offset}!\\n` + prettyPrintPosition(str, token.offset, token.len));\n    }\n    return result.value;\n}\nfunction prettyPrintPosition(str, offset, len = 1) {\n    return `${str.replace(/(\\t)|(\\r)|(\\n)/g, (m, t, r)=>t ? \"␉\" : r ? \"␍\" : \"␊\")}\\n${\"\".padEnd(offset)}${\"^\".repeat(len)}`;\n}\nfunction parse(str) {\n    return parse_(listSelector_, str);\n}\nfunction parse1(str) {\n    return parse_(complexSelector_, str);\n}\nfunction serialize(selector) {\n    if (!selector.type) {\n        throw new Error(\"This is not an AST node.\");\n    }\n    switch(selector.type){\n        case \"universal\":\n            return _serNs(selector.namespace) + \"*\";\n        case \"tag\":\n            return _serNs(selector.namespace) + selector.name;\n        case \"class\":\n            return \".\" + selector.name;\n        case \"id\":\n            return \"#\" + selector.name;\n        case \"attrPresence\":\n            return `[${_serNs(selector.namespace)}${selector.name}]`;\n        case \"attrValue\":\n            return `[${_serNs(selector.namespace)}${selector.name}${selector.matcher}${_serStr(selector.value)}${selector.modifier ? selector.modifier : \"\"}]`;\n        case \"combinator\":\n            return serialize(selector.left) + selector.combinator;\n        case \"compound\":\n            return selector.list.reduce((acc, node)=>{\n                if (node.type === \"combinator\") {\n                    return serialize(node) + acc;\n                } else {\n                    return acc + serialize(node);\n                }\n            }, \"\");\n        case \"list\":\n            return selector.list.map(serialize).join(\",\");\n    }\n}\nfunction _serNs(ns) {\n    return ns || ns === \"\" ? ns + \"|\" : \"\";\n}\nfunction _serStr(str) {\n    if (str.indexOf('\"') === -1) {\n        return `\"${str}\"`;\n    } else if (str.indexOf(\"'\") === -1) {\n        return `'${str}'`;\n    } else {\n        return `\"${str.replace('\"', '\\\\\"')}\"`;\n    }\n}\nfunction normalize(selector) {\n    if (!selector.type) {\n        throw new Error(\"This is not an AST node.\");\n    }\n    switch(selector.type){\n        case \"compound\":\n            {\n                selector.list.forEach(normalize);\n                selector.list.sort((a, b)=>_compareArrays(_getSelectorPriority(a), _getSelectorPriority(b)));\n                break;\n            }\n        case \"combinator\":\n            {\n                normalize(selector.left);\n                break;\n            }\n        case \"list\":\n            {\n                selector.list.forEach(normalize);\n                selector.list.sort((a, b)=>serialize(a) < serialize(b) ? -1 : 1);\n                break;\n            }\n    }\n    return selector;\n}\nfunction _getSelectorPriority(selector) {\n    switch(selector.type){\n        case \"universal\":\n            return [\n                1\n            ];\n        case \"tag\":\n            return [\n                1\n            ];\n        case \"id\":\n            return [\n                2\n            ];\n        case \"class\":\n            return [\n                3,\n                selector.name\n            ];\n        case \"attrPresence\":\n            return [\n                4,\n                serialize(selector)\n            ];\n        case \"attrValue\":\n            return [\n                5,\n                serialize(selector)\n            ];\n        case \"combinator\":\n            return [\n                15,\n                serialize(selector)\n            ];\n    }\n}\nfunction compareSelectors(a, b) {\n    return _compareArrays(a.specificity, b.specificity);\n}\nfunction compareSpecificity(a, b) {\n    return _compareArrays(a, b);\n}\nfunction _compareArrays(a, b) {\n    if (!Array.isArray(a) || !Array.isArray(b)) {\n        throw new Error(\"Arguments must be arrays.\");\n    }\n    const shorter = a.length < b.length ? a.length : b.length;\n    for(let i = 0; i < shorter; i++){\n        if (a[i] === b[i]) {\n            continue;\n        }\n        return a[i] < b[i] ? -1 : 1;\n    }\n    return a.length - b.length;\n}\nexports.Ast = ast;\nexports.compareSelectors = compareSelectors;\nexports.compareSpecificity = compareSpecificity;\nexports.normalize = normalize;\nexports.parse = parse;\nexports.parse1 = parse1;\nexports.serialize = serialize;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/parseley/lib/parseley.cjs\n");

/***/ })

};
;