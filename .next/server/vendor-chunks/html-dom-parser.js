"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/html-dom-parser";
exports.ids = ["vendor-chunks/html-dom-parser"];
exports.modules = {

/***/ "(action-browser)/./node_modules/html-dom-parser/index.js":
/*!***********************************************!*\
  !*** ./node_modules/html-dom-parser/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * When running on Node.js, use the server parser.\n * When bundling for the browser, use the client parser.\n *\n * @see {@link https://github.com/substack/node-browserify#browser-field}\n */ \nvar HTMLDOMParser = __webpack_require__(/*! ./lib/server/html-to-dom */ \"(action-browser)/./node_modules/html-dom-parser/lib/server/html-to-dom.js\");\nmodule.exports = HTMLDOMParser;\nmodule.exports[\"default\"] = HTMLDOMParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9odG1sLWRvbS1wYXJzZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0NBS0M7QUFDRCxJQUFJQSxnQkFBZ0JDLG1CQUFPQSxDQUFDO0FBRTVCQyxPQUFPQyxPQUFPLEdBQUdIO0FBQ2pCRSx5QkFBc0IsR0FBR0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvaHRtbC1kb20tcGFyc2VyL2luZGV4LmpzPzNjMzEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBXaGVuIHJ1bm5pbmcgb24gTm9kZS5qcywgdXNlIHRoZSBzZXJ2ZXIgcGFyc2VyLlxuICogV2hlbiBidW5kbGluZyBmb3IgdGhlIGJyb3dzZXIsIHVzZSB0aGUgY2xpZW50IHBhcnNlci5cbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vc3Vic3RhY2svbm9kZS1icm93c2VyaWZ5I2Jyb3dzZXItZmllbGR9XG4gKi9cbnZhciBIVE1MRE9NUGFyc2VyID0gcmVxdWlyZSgnLi9saWIvc2VydmVyL2h0bWwtdG8tZG9tJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gSFRNTERPTVBhcnNlcjtcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBIVE1MRE9NUGFyc2VyO1xuIl0sIm5hbWVzIjpbIkhUTUxET01QYXJzZXIiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/html-dom-parser/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/html-dom-parser/lib/server/html-to-dom.js":
/*!****************************************************************!*\
  !*** ./node_modules/html-dom-parser/lib/server/html-to-dom.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Parser = (__webpack_require__(/*! htmlparser2 */ \"(action-browser)/./node_modules/html-dom-parser/node_modules/htmlparser2/lib/index.js\").Parser);\nvar DomHandler = (__webpack_require__(/*! domhandler */ \"(action-browser)/./node_modules/domhandler/lib/index.js\").DomHandler);\nvar unsetRootParent = (__webpack_require__(/*! ./utilities */ \"(action-browser)/./node_modules/html-dom-parser/lib/server/utilities.js\").unsetRootParent);\n/**\n * Parses HTML string to DOM nodes in Node.js.\n *\n * This is the same method as `require('htmlparser2').parseDOM`\n * https://github.com/fb55/htmlparser2/blob/v6.0.0/src/index.ts#L29-L41\n *\n * @param  {string}            html      - HTML markup.\n * @param  {DomHandlerOptions} [options] - Parser options (https://github.com/fb55/domhandler/tree/v4.0.0#readme).\n * @return {Array<Comment|Element|ProcessingInstruction|Text>} - DOM nodes.\n */ function HTMLDOMParser(html, options) {\n    if (typeof html !== \"string\") {\n        throw new TypeError(\"First argument must be a string.\");\n    }\n    if (html === \"\") {\n        return [];\n    }\n    var handler = new DomHandler(undefined, options);\n    new Parser(handler, options).end(html);\n    return unsetRootParent(handler.dom);\n}\nmodule.exports = HTMLDOMParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9odG1sLWRvbS1wYXJzZXIvbGliL3NlcnZlci9odG1sLXRvLWRvbS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsU0FBU0Msd0lBQTZCO0FBQzFDLElBQUlDLGFBQWFELDZHQUFnQztBQUVqRCxJQUFJRSxrQkFBa0JGLG1JQUFzQztBQUU1RDs7Ozs7Ozs7O0NBU0MsR0FDRCxTQUFTRyxjQUFjQyxJQUFJLEVBQUVDLE9BQU87SUFDbEMsSUFBSSxPQUFPRCxTQUFTLFVBQVU7UUFDNUIsTUFBTSxJQUFJRSxVQUFVO0lBQ3RCO0lBRUEsSUFBSUYsU0FBUyxJQUFJO1FBQ2YsT0FBTyxFQUFFO0lBQ1g7SUFFQSxJQUFJRyxVQUFVLElBQUlOLFdBQVdPLFdBQVdIO0lBQ3hDLElBQUlOLE9BQU9RLFNBQVNGLFNBQVNJLEdBQUcsQ0FBQ0w7SUFDakMsT0FBT0YsZ0JBQWdCSyxRQUFRRyxHQUFHO0FBQ3BDO0FBRUFDLE9BQU9DLE9BQU8sR0FBR1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvaHRtbC1kb20tcGFyc2VyL2xpYi9zZXJ2ZXIvaHRtbC10by1kb20uanM/ODlkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgUGFyc2VyID0gcmVxdWlyZSgnaHRtbHBhcnNlcjInKS5QYXJzZXI7XG52YXIgRG9tSGFuZGxlciA9IHJlcXVpcmUoJ2RvbWhhbmRsZXInKS5Eb21IYW5kbGVyO1xuXG52YXIgdW5zZXRSb290UGFyZW50ID0gcmVxdWlyZSgnLi91dGlsaXRpZXMnKS51bnNldFJvb3RQYXJlbnQ7XG5cbi8qKlxuICogUGFyc2VzIEhUTUwgc3RyaW5nIHRvIERPTSBub2RlcyBpbiBOb2RlLmpzLlxuICpcbiAqIFRoaXMgaXMgdGhlIHNhbWUgbWV0aG9kIGFzIGByZXF1aXJlKCdodG1scGFyc2VyMicpLnBhcnNlRE9NYFxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZiNTUvaHRtbHBhcnNlcjIvYmxvYi92Ni4wLjAvc3JjL2luZGV4LnRzI0wyOS1MNDFcbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgaHRtbCAgICAgIC0gSFRNTCBtYXJrdXAuXG4gKiBAcGFyYW0gIHtEb21IYW5kbGVyT3B0aW9uc30gW29wdGlvbnNdIC0gUGFyc2VyIG9wdGlvbnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9mYjU1L2RvbWhhbmRsZXIvdHJlZS92NC4wLjAjcmVhZG1lKS5cbiAqIEByZXR1cm4ge0FycmF5PENvbW1lbnR8RWxlbWVudHxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb258VGV4dD59IC0gRE9NIG5vZGVzLlxuICovXG5mdW5jdGlvbiBIVE1MRE9NUGFyc2VyKGh0bWwsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBodG1sICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcuJyk7XG4gIH1cblxuICBpZiAoaHRtbCA9PT0gJycpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IG5ldyBEb21IYW5kbGVyKHVuZGVmaW5lZCwgb3B0aW9ucyk7XG4gIG5ldyBQYXJzZXIoaGFuZGxlciwgb3B0aW9ucykuZW5kKGh0bWwpO1xuICByZXR1cm4gdW5zZXRSb290UGFyZW50KGhhbmRsZXIuZG9tKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIVE1MRE9NUGFyc2VyO1xuIl0sIm5hbWVzIjpbIlBhcnNlciIsInJlcXVpcmUiLCJEb21IYW5kbGVyIiwidW5zZXRSb290UGFyZW50IiwiSFRNTERPTVBhcnNlciIsImh0bWwiLCJvcHRpb25zIiwiVHlwZUVycm9yIiwiaGFuZGxlciIsInVuZGVmaW5lZCIsImVuZCIsImRvbSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/html-dom-parser/lib/server/html-to-dom.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/html-dom-parser/lib/server/utilities.js":
/*!**************************************************************!*\
  !*** ./node_modules/html-dom-parser/lib/server/utilities.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("/**\n * Sets root parent to null.\n *\n * @param  {Array<Comment|Element|ProcessingInstruction|Text>} nodes\n * @return {Array<Comment|Element|ProcessingInstruction|Text>}\n */ \nfunction unsetRootParent(nodes) {\n    for(var index = 0, len = nodes.length; index < len; index++){\n        var node = nodes[index];\n        node.parent = null;\n    }\n    return nodes;\n}\nmodule.exports = {\n    unsetRootParent: unsetRootParent\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9odG1sLWRvbS1wYXJzZXIvbGliL3NlcnZlci91dGlsaXRpZXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0NBS0M7QUFDRCxTQUFTQSxnQkFBZ0JDLEtBQUs7SUFDNUIsSUFBSyxJQUFJQyxRQUFRLEdBQUdDLE1BQU1GLE1BQU1HLE1BQU0sRUFBRUYsUUFBUUMsS0FBS0QsUUFBUztRQUM1RCxJQUFJRyxPQUFPSixLQUFLLENBQUNDLE1BQU07UUFDdkJHLEtBQUtDLE1BQU0sR0FBRztJQUNoQjtJQUNBLE9BQU9MO0FBQ1Q7QUFFQU0sT0FBT0MsT0FBTyxHQUFHO0lBQ2ZSLGlCQUFpQkE7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvaHRtbC1kb20tcGFyc2VyL2xpYi9zZXJ2ZXIvdXRpbGl0aWVzLmpzPzQ5MzEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTZXRzIHJvb3QgcGFyZW50IHRvIG51bGwuXG4gKlxuICogQHBhcmFtICB7QXJyYXk8Q29tbWVudHxFbGVtZW50fFByb2Nlc3NpbmdJbnN0cnVjdGlvbnxUZXh0Pn0gbm9kZXNcbiAqIEByZXR1cm4ge0FycmF5PENvbW1lbnR8RWxlbWVudHxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb258VGV4dD59XG4gKi9cbmZ1bmN0aW9uIHVuc2V0Um9vdFBhcmVudChub2Rlcykge1xuICBmb3IgKHZhciBpbmRleCA9IDAsIGxlbiA9IG5vZGVzLmxlbmd0aDsgaW5kZXggPCBsZW47IGluZGV4KyspIHtcbiAgICB2YXIgbm9kZSA9IG5vZGVzW2luZGV4XTtcbiAgICBub2RlLnBhcmVudCA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIG5vZGVzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdW5zZXRSb290UGFyZW50OiB1bnNldFJvb3RQYXJlbnRcbn07XG4iXSwibmFtZXMiOlsidW5zZXRSb290UGFyZW50Iiwibm9kZXMiLCJpbmRleCIsImxlbiIsImxlbmd0aCIsIm5vZGUiLCJwYXJlbnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/html-dom-parser/lib/server/utilities.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/html-dom-parser/node_modules/htmlparser2/lib/Parser.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/html-dom-parser/node_modules/htmlparser2/lib/Parser.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Parser = void 0;\nvar Tokenizer_js_1 = __importStar(__webpack_require__(/*! ./Tokenizer.js */ \"(action-browser)/./node_modules/html-dom-parser/node_modules/htmlparser2/lib/Tokenizer.js\"));\nvar decode_js_1 = __webpack_require__(/*! entities/lib/decode.js */ \"(action-browser)/./node_modules/entities/lib/decode.js\");\nvar formTags = new Set([\n    \"input\",\n    \"option\",\n    \"optgroup\",\n    \"select\",\n    \"button\",\n    \"datalist\",\n    \"textarea\"\n]);\nvar pTag = new Set([\n    \"p\"\n]);\nvar tableSectionTags = new Set([\n    \"thead\",\n    \"tbody\"\n]);\nvar ddtTags = new Set([\n    \"dd\",\n    \"dt\"\n]);\nvar rtpTags = new Set([\n    \"rt\",\n    \"rp\"\n]);\nvar openImpliesClose = new Map([\n    [\n        \"tr\",\n        new Set([\n            \"tr\",\n            \"th\",\n            \"td\"\n        ])\n    ],\n    [\n        \"th\",\n        new Set([\n            \"th\"\n        ])\n    ],\n    [\n        \"td\",\n        new Set([\n            \"thead\",\n            \"th\",\n            \"td\"\n        ])\n    ],\n    [\n        \"body\",\n        new Set([\n            \"head\",\n            \"link\",\n            \"script\"\n        ])\n    ],\n    [\n        \"li\",\n        new Set([\n            \"li\"\n        ])\n    ],\n    [\n        \"p\",\n        pTag\n    ],\n    [\n        \"h1\",\n        pTag\n    ],\n    [\n        \"h2\",\n        pTag\n    ],\n    [\n        \"h3\",\n        pTag\n    ],\n    [\n        \"h4\",\n        pTag\n    ],\n    [\n        \"h5\",\n        pTag\n    ],\n    [\n        \"h6\",\n        pTag\n    ],\n    [\n        \"select\",\n        formTags\n    ],\n    [\n        \"input\",\n        formTags\n    ],\n    [\n        \"output\",\n        formTags\n    ],\n    [\n        \"button\",\n        formTags\n    ],\n    [\n        \"datalist\",\n        formTags\n    ],\n    [\n        \"textarea\",\n        formTags\n    ],\n    [\n        \"option\",\n        new Set([\n            \"option\"\n        ])\n    ],\n    [\n        \"optgroup\",\n        new Set([\n            \"optgroup\",\n            \"option\"\n        ])\n    ],\n    [\n        \"dd\",\n        ddtTags\n    ],\n    [\n        \"dt\",\n        ddtTags\n    ],\n    [\n        \"address\",\n        pTag\n    ],\n    [\n        \"article\",\n        pTag\n    ],\n    [\n        \"aside\",\n        pTag\n    ],\n    [\n        \"blockquote\",\n        pTag\n    ],\n    [\n        \"details\",\n        pTag\n    ],\n    [\n        \"div\",\n        pTag\n    ],\n    [\n        \"dl\",\n        pTag\n    ],\n    [\n        \"fieldset\",\n        pTag\n    ],\n    [\n        \"figcaption\",\n        pTag\n    ],\n    [\n        \"figure\",\n        pTag\n    ],\n    [\n        \"footer\",\n        pTag\n    ],\n    [\n        \"form\",\n        pTag\n    ],\n    [\n        \"header\",\n        pTag\n    ],\n    [\n        \"hr\",\n        pTag\n    ],\n    [\n        \"main\",\n        pTag\n    ],\n    [\n        \"nav\",\n        pTag\n    ],\n    [\n        \"ol\",\n        pTag\n    ],\n    [\n        \"pre\",\n        pTag\n    ],\n    [\n        \"section\",\n        pTag\n    ],\n    [\n        \"table\",\n        pTag\n    ],\n    [\n        \"ul\",\n        pTag\n    ],\n    [\n        \"rt\",\n        rtpTags\n    ],\n    [\n        \"rp\",\n        rtpTags\n    ],\n    [\n        \"tbody\",\n        tableSectionTags\n    ],\n    [\n        \"tfoot\",\n        tableSectionTags\n    ]\n]);\nvar voidElements = new Set([\n    \"area\",\n    \"base\",\n    \"basefont\",\n    \"br\",\n    \"col\",\n    \"command\",\n    \"embed\",\n    \"frame\",\n    \"hr\",\n    \"img\",\n    \"input\",\n    \"isindex\",\n    \"keygen\",\n    \"link\",\n    \"meta\",\n    \"param\",\n    \"source\",\n    \"track\",\n    \"wbr\"\n]);\nvar foreignContextElements = new Set([\n    \"math\",\n    \"svg\"\n]);\nvar htmlIntegrationElements = new Set([\n    \"mi\",\n    \"mo\",\n    \"mn\",\n    \"ms\",\n    \"mtext\",\n    \"annotation-xml\",\n    \"foreignobject\",\n    \"desc\",\n    \"title\"\n]);\nvar reNameEnd = /\\s|\\//;\nvar Parser = /** @class */ function() {\n    function Parser(cbs, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var _a, _b, _c, _d, _e;\n        this.options = options;\n        /** The start index of the last event. */ this.startIndex = 0;\n        /** The end index of the last event. */ this.endIndex = 0;\n        /**\n         * Store the start index of the current open tag,\n         * so we can update the start index for attributes.\n         */ this.openTagStart = 0;\n        this.tagname = \"\";\n        this.attribname = \"\";\n        this.attribvalue = \"\";\n        this.attribs = null;\n        this.stack = [];\n        this.foreignContext = [];\n        this.buffers = [];\n        this.bufferOffset = 0;\n        /** The index of the last written buffer. Used when resuming after a `pause()`. */ this.writeIndex = 0;\n        /** Indicates whether the parser has finished running / `.end` has been called. */ this.ended = false;\n        this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};\n        this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode;\n        this.lowerCaseAttributeNames = (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode;\n        this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_js_1.default)(this.options, this);\n        (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 ? void 0 : _e.call(_d, this);\n    }\n    // Tokenizer event handlers\n    /** @internal */ Parser.prototype.ontext = function(start, endIndex) {\n        var _a, _b;\n        var data = this.getSlice(start, endIndex);\n        this.endIndex = endIndex - 1;\n        (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, data);\n        this.startIndex = endIndex;\n    };\n    /** @internal */ Parser.prototype.ontextentity = function(cp) {\n        var _a, _b;\n        /*\n         * Entities can be emitted on the character, or directly after.\n         * We use the section start here to get accurate indices.\n         */ var idx = this.tokenizer.getSectionStart();\n        this.endIndex = idx - 1;\n        (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, (0, decode_js_1.fromCodePoint)(cp));\n        this.startIndex = idx;\n    };\n    Parser.prototype.isVoidElement = function(name) {\n        return !this.options.xmlMode && voidElements.has(name);\n    };\n    /** @internal */ Parser.prototype.onopentagname = function(start, endIndex) {\n        this.endIndex = endIndex;\n        var name = this.getSlice(start, endIndex);\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        this.emitOpenTag(name);\n    };\n    Parser.prototype.emitOpenTag = function(name) {\n        var _a, _b, _c, _d;\n        this.openTagStart = this.startIndex;\n        this.tagname = name;\n        var impliesClose = !this.options.xmlMode && openImpliesClose.get(name);\n        if (impliesClose) {\n            while(this.stack.length > 0 && impliesClose.has(this.stack[this.stack.length - 1])){\n                var el = this.stack.pop();\n                (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, el, true);\n            }\n        }\n        if (!this.isVoidElement(name)) {\n            this.stack.push(name);\n            if (foreignContextElements.has(name)) {\n                this.foreignContext.push(true);\n            } else if (htmlIntegrationElements.has(name)) {\n                this.foreignContext.push(false);\n            }\n        }\n        (_d = (_c = this.cbs).onopentagname) === null || _d === void 0 ? void 0 : _d.call(_c, name);\n        if (this.cbs.onopentag) this.attribs = {};\n    };\n    Parser.prototype.endOpenTag = function(isImplied) {\n        var _a, _b;\n        this.startIndex = this.openTagStart;\n        if (this.attribs) {\n            (_b = (_a = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a, this.tagname, this.attribs, isImplied);\n            this.attribs = null;\n        }\n        if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) {\n            this.cbs.onclosetag(this.tagname, true);\n        }\n        this.tagname = \"\";\n    };\n    /** @internal */ Parser.prototype.onopentagend = function(endIndex) {\n        this.endIndex = endIndex;\n        this.endOpenTag(false);\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */ Parser.prototype.onclosetag = function(start, endIndex) {\n        var _a, _b, _c, _d, _e, _f;\n        this.endIndex = endIndex;\n        var name = this.getSlice(start, endIndex);\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        if (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) {\n            this.foreignContext.pop();\n        }\n        if (!this.isVoidElement(name)) {\n            var pos = this.stack.lastIndexOf(name);\n            if (pos !== -1) {\n                if (this.cbs.onclosetag) {\n                    var count = this.stack.length - pos;\n                    while(count--){\n                        // We know the stack has sufficient elements.\n                        this.cbs.onclosetag(this.stack.pop(), count !== 0);\n                    }\n                } else this.stack.length = pos;\n            } else if (!this.options.xmlMode && name === \"p\") {\n                // Implicit open before close\n                this.emitOpenTag(\"p\");\n                this.closeCurrentTag(true);\n            }\n        } else if (!this.options.xmlMode && name === \"br\") {\n            // We can't use `emitOpenTag` for implicit open, as `br` would be implicitly closed.\n            (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 ? void 0 : _b.call(_a, \"br\");\n            (_d = (_c = this.cbs).onopentag) === null || _d === void 0 ? void 0 : _d.call(_c, \"br\", {}, true);\n            (_f = (_e = this.cbs).onclosetag) === null || _f === void 0 ? void 0 : _f.call(_e, \"br\", false);\n        }\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */ Parser.prototype.onselfclosingtag = function(endIndex) {\n        this.endIndex = endIndex;\n        if (this.options.xmlMode || this.options.recognizeSelfClosing || this.foreignContext[this.foreignContext.length - 1]) {\n            this.closeCurrentTag(false);\n            // Set `startIndex` for next node\n            this.startIndex = endIndex + 1;\n        } else {\n            // Ignore the fact that the tag is self-closing.\n            this.onopentagend(endIndex);\n        }\n    };\n    Parser.prototype.closeCurrentTag = function(isOpenImplied) {\n        var _a, _b;\n        var name = this.tagname;\n        this.endOpenTag(isOpenImplied);\n        // Self-closing tags will be on the top of the stack\n        if (this.stack[this.stack.length - 1] === name) {\n            // If the opening tag isn't implied, the closing tag has to be implied.\n            (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, name, !isOpenImplied);\n            this.stack.pop();\n        }\n    };\n    /** @internal */ Parser.prototype.onattribname = function(start, endIndex) {\n        this.startIndex = start;\n        var name = this.getSlice(start, endIndex);\n        this.attribname = this.lowerCaseAttributeNames ? name.toLowerCase() : name;\n    };\n    /** @internal */ Parser.prototype.onattribdata = function(start, endIndex) {\n        this.attribvalue += this.getSlice(start, endIndex);\n    };\n    /** @internal */ Parser.prototype.onattribentity = function(cp) {\n        this.attribvalue += (0, decode_js_1.fromCodePoint)(cp);\n    };\n    /** @internal */ Parser.prototype.onattribend = function(quote, endIndex) {\n        var _a, _b;\n        this.endIndex = endIndex;\n        (_b = (_a = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a, this.attribname, this.attribvalue, quote === Tokenizer_js_1.QuoteType.Double ? '\"' : quote === Tokenizer_js_1.QuoteType.Single ? \"'\" : quote === Tokenizer_js_1.QuoteType.NoValue ? undefined : null);\n        if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {\n            this.attribs[this.attribname] = this.attribvalue;\n        }\n        this.attribvalue = \"\";\n    };\n    Parser.prototype.getInstructionName = function(value) {\n        var idx = value.search(reNameEnd);\n        var name = idx < 0 ? value : value.substr(0, idx);\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        return name;\n    };\n    /** @internal */ Parser.prototype.ondeclaration = function(start, endIndex) {\n        this.endIndex = endIndex;\n        var value = this.getSlice(start, endIndex);\n        if (this.cbs.onprocessinginstruction) {\n            var name = this.getInstructionName(value);\n            this.cbs.onprocessinginstruction(\"!\".concat(name), \"!\".concat(value));\n        }\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */ Parser.prototype.onprocessinginstruction = function(start, endIndex) {\n        this.endIndex = endIndex;\n        var value = this.getSlice(start, endIndex);\n        if (this.cbs.onprocessinginstruction) {\n            var name = this.getInstructionName(value);\n            this.cbs.onprocessinginstruction(\"?\".concat(name), \"?\".concat(value));\n        }\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */ Parser.prototype.oncomment = function(start, endIndex, offset) {\n        var _a, _b, _c, _d;\n        this.endIndex = endIndex;\n        (_b = (_a = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a, this.getSlice(start, endIndex - offset));\n        (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */ Parser.prototype.oncdata = function(start, endIndex, offset) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        this.endIndex = endIndex;\n        var value = this.getSlice(start, endIndex - offset);\n        if (this.options.xmlMode || this.options.recognizeCDATA) {\n            (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a);\n            (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);\n            (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);\n        } else {\n            (_h = (_g = this.cbs).oncomment) === null || _h === void 0 ? void 0 : _h.call(_g, \"[CDATA[\".concat(value, \"]]\"));\n            (_k = (_j = this.cbs).oncommentend) === null || _k === void 0 ? void 0 : _k.call(_j);\n        }\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */ Parser.prototype.onend = function() {\n        var _a, _b;\n        if (this.cbs.onclosetag) {\n            // Set the end index for all remaining tags\n            this.endIndex = this.startIndex;\n            for(var i = this.stack.length; i > 0; this.cbs.onclosetag(this.stack[--i], true));\n        }\n        (_b = (_a = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n    /**\n     * Resets the parser to a blank state, ready to parse a new HTML document\n     */ Parser.prototype.reset = function() {\n        var _a, _b, _c, _d;\n        (_b = (_a = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a);\n        this.tokenizer.reset();\n        this.tagname = \"\";\n        this.attribname = \"\";\n        this.attribs = null;\n        this.stack.length = 0;\n        this.startIndex = 0;\n        this.endIndex = 0;\n        (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);\n        this.buffers.length = 0;\n        this.bufferOffset = 0;\n        this.writeIndex = 0;\n        this.ended = false;\n    };\n    /**\n     * Resets the parser, then parses a complete document and\n     * pushes it to the handler.\n     *\n     * @param data Document to parse.\n     */ Parser.prototype.parseComplete = function(data) {\n        this.reset();\n        this.end(data);\n    };\n    Parser.prototype.getSlice = function(start, end) {\n        while(start - this.bufferOffset >= this.buffers[0].length){\n            this.shiftBuffer();\n        }\n        var str = this.buffers[0].slice(start - this.bufferOffset, end - this.bufferOffset);\n        while(end - this.bufferOffset > this.buffers[0].length){\n            this.shiftBuffer();\n            str += this.buffers[0].slice(0, end - this.bufferOffset);\n        }\n        return str;\n    };\n    Parser.prototype.shiftBuffer = function() {\n        this.bufferOffset += this.buffers[0].length;\n        this.writeIndex--;\n        this.buffers.shift();\n    };\n    /**\n     * Parses a chunk of data and calls the corresponding callbacks.\n     *\n     * @param chunk Chunk to parse.\n     */ Parser.prototype.write = function(chunk) {\n        var _a, _b;\n        if (this.ended) {\n            (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(\".write() after done!\"));\n            return;\n        }\n        this.buffers.push(chunk);\n        if (this.tokenizer.running) {\n            this.tokenizer.write(chunk);\n            this.writeIndex++;\n        }\n    };\n    /**\n     * Parses the end of the buffer and clears the stack, calls onend.\n     *\n     * @param chunk Optional final chunk to parse.\n     */ Parser.prototype.end = function(chunk) {\n        var _a, _b;\n        if (this.ended) {\n            (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, Error(\".end() after done!\"));\n            return;\n        }\n        if (chunk) this.write(chunk);\n        this.ended = true;\n        this.tokenizer.end();\n    };\n    /**\n     * Pauses parsing. The parser won't emit events until `resume` is called.\n     */ Parser.prototype.pause = function() {\n        this.tokenizer.pause();\n    };\n    /**\n     * Resumes parsing after `pause` was called.\n     */ Parser.prototype.resume = function() {\n        this.tokenizer.resume();\n        while(this.tokenizer.running && this.writeIndex < this.buffers.length){\n            this.tokenizer.write(this.buffers[this.writeIndex++]);\n        }\n        if (this.ended) this.tokenizer.end();\n    };\n    /**\n     * Alias of `write`, for backwards compatibility.\n     *\n     * @param chunk Chunk to parse.\n     * @deprecated\n     */ Parser.prototype.parseChunk = function(chunk) {\n        this.write(chunk);\n    };\n    /**\n     * Alias of `end`, for backwards compatibility.\n     *\n     * @param chunk Optional final chunk to parse.\n     * @deprecated\n     */ Parser.prototype.done = function(chunk) {\n        this.end(chunk);\n    };\n    return Parser;\n}();\nexports.Parser = Parser; //# sourceMappingURL=Parser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/html-dom-parser/node_modules/htmlparser2/lib/Parser.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/html-dom-parser/node_modules/htmlparser2/lib/Tokenizer.js":
/*!********************************************************************************!*\
  !*** ./node_modules/html-dom-parser/node_modules/htmlparser2/lib/Tokenizer.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.QuoteType = void 0;\nvar decode_js_1 = __webpack_require__(/*! entities/lib/decode.js */ \"(action-browser)/./node_modules/entities/lib/decode.js\");\nvar CharCodes;\n(function(CharCodes) {\n    CharCodes[CharCodes[\"Tab\"] = 9] = \"Tab\";\n    CharCodes[CharCodes[\"NewLine\"] = 10] = \"NewLine\";\n    CharCodes[CharCodes[\"FormFeed\"] = 12] = \"FormFeed\";\n    CharCodes[CharCodes[\"CarriageReturn\"] = 13] = \"CarriageReturn\";\n    CharCodes[CharCodes[\"Space\"] = 32] = \"Space\";\n    CharCodes[CharCodes[\"ExclamationMark\"] = 33] = \"ExclamationMark\";\n    CharCodes[CharCodes[\"Num\"] = 35] = \"Num\";\n    CharCodes[CharCodes[\"Amp\"] = 38] = \"Amp\";\n    CharCodes[CharCodes[\"SingleQuote\"] = 39] = \"SingleQuote\";\n    CharCodes[CharCodes[\"DoubleQuote\"] = 34] = \"DoubleQuote\";\n    CharCodes[CharCodes[\"Dash\"] = 45] = \"Dash\";\n    CharCodes[CharCodes[\"Slash\"] = 47] = \"Slash\";\n    CharCodes[CharCodes[\"Zero\"] = 48] = \"Zero\";\n    CharCodes[CharCodes[\"Nine\"] = 57] = \"Nine\";\n    CharCodes[CharCodes[\"Semi\"] = 59] = \"Semi\";\n    CharCodes[CharCodes[\"Lt\"] = 60] = \"Lt\";\n    CharCodes[CharCodes[\"Eq\"] = 61] = \"Eq\";\n    CharCodes[CharCodes[\"Gt\"] = 62] = \"Gt\";\n    CharCodes[CharCodes[\"Questionmark\"] = 63] = \"Questionmark\";\n    CharCodes[CharCodes[\"UpperA\"] = 65] = \"UpperA\";\n    CharCodes[CharCodes[\"LowerA\"] = 97] = \"LowerA\";\n    CharCodes[CharCodes[\"UpperF\"] = 70] = \"UpperF\";\n    CharCodes[CharCodes[\"LowerF\"] = 102] = \"LowerF\";\n    CharCodes[CharCodes[\"UpperZ\"] = 90] = \"UpperZ\";\n    CharCodes[CharCodes[\"LowerZ\"] = 122] = \"LowerZ\";\n    CharCodes[CharCodes[\"LowerX\"] = 120] = \"LowerX\";\n    CharCodes[CharCodes[\"OpeningSquareBracket\"] = 91] = \"OpeningSquareBracket\";\n})(CharCodes || (CharCodes = {}));\n/** All the states the tokenizer can be in. */ var State;\n(function(State) {\n    State[State[\"Text\"] = 1] = \"Text\";\n    State[State[\"BeforeTagName\"] = 2] = \"BeforeTagName\";\n    State[State[\"InTagName\"] = 3] = \"InTagName\";\n    State[State[\"InSelfClosingTag\"] = 4] = \"InSelfClosingTag\";\n    State[State[\"BeforeClosingTagName\"] = 5] = \"BeforeClosingTagName\";\n    State[State[\"InClosingTagName\"] = 6] = \"InClosingTagName\";\n    State[State[\"AfterClosingTagName\"] = 7] = \"AfterClosingTagName\";\n    // Attributes\n    State[State[\"BeforeAttributeName\"] = 8] = \"BeforeAttributeName\";\n    State[State[\"InAttributeName\"] = 9] = \"InAttributeName\";\n    State[State[\"AfterAttributeName\"] = 10] = \"AfterAttributeName\";\n    State[State[\"BeforeAttributeValue\"] = 11] = \"BeforeAttributeValue\";\n    State[State[\"InAttributeValueDq\"] = 12] = \"InAttributeValueDq\";\n    State[State[\"InAttributeValueSq\"] = 13] = \"InAttributeValueSq\";\n    State[State[\"InAttributeValueNq\"] = 14] = \"InAttributeValueNq\";\n    // Declarations\n    State[State[\"BeforeDeclaration\"] = 15] = \"BeforeDeclaration\";\n    State[State[\"InDeclaration\"] = 16] = \"InDeclaration\";\n    // Processing instructions\n    State[State[\"InProcessingInstruction\"] = 17] = \"InProcessingInstruction\";\n    // Comments & CDATA\n    State[State[\"BeforeComment\"] = 18] = \"BeforeComment\";\n    State[State[\"CDATASequence\"] = 19] = \"CDATASequence\";\n    State[State[\"InSpecialComment\"] = 20] = \"InSpecialComment\";\n    State[State[\"InCommentLike\"] = 21] = \"InCommentLike\";\n    // Special tags\n    State[State[\"BeforeSpecialS\"] = 22] = \"BeforeSpecialS\";\n    State[State[\"SpecialStartSequence\"] = 23] = \"SpecialStartSequence\";\n    State[State[\"InSpecialTag\"] = 24] = \"InSpecialTag\";\n    State[State[\"BeforeEntity\"] = 25] = \"BeforeEntity\";\n    State[State[\"BeforeNumericEntity\"] = 26] = \"BeforeNumericEntity\";\n    State[State[\"InNamedEntity\"] = 27] = \"InNamedEntity\";\n    State[State[\"InNumericEntity\"] = 28] = \"InNumericEntity\";\n    State[State[\"InHexEntity\"] = 29] = \"InHexEntity\";\n})(State || (State = {}));\nfunction isWhitespace(c) {\n    return c === CharCodes.Space || c === CharCodes.NewLine || c === CharCodes.Tab || c === CharCodes.FormFeed || c === CharCodes.CarriageReturn;\n}\nfunction isEndOfTagSection(c) {\n    return c === CharCodes.Slash || c === CharCodes.Gt || isWhitespace(c);\n}\nfunction isNumber(c) {\n    return c >= CharCodes.Zero && c <= CharCodes.Nine;\n}\nfunction isASCIIAlpha(c) {\n    return c >= CharCodes.LowerA && c <= CharCodes.LowerZ || c >= CharCodes.UpperA && c <= CharCodes.UpperZ;\n}\nfunction isHexDigit(c) {\n    return c >= CharCodes.UpperA && c <= CharCodes.UpperF || c >= CharCodes.LowerA && c <= CharCodes.LowerF;\n}\nvar QuoteType;\n(function(QuoteType) {\n    QuoteType[QuoteType[\"NoValue\"] = 0] = \"NoValue\";\n    QuoteType[QuoteType[\"Unquoted\"] = 1] = \"Unquoted\";\n    QuoteType[QuoteType[\"Single\"] = 2] = \"Single\";\n    QuoteType[QuoteType[\"Double\"] = 3] = \"Double\";\n})(QuoteType = exports.QuoteType || (exports.QuoteType = {}));\n/**\n * Sequences used to match longer strings.\n *\n * We don't have `Script`, `Style`, or `Title` here. Instead, we re-use the *End\n * sequences with an increased offset.\n */ var Sequences = {\n    Cdata: new Uint8Array([\n        0x43,\n        0x44,\n        0x41,\n        0x54,\n        0x41,\n        0x5b\n    ]),\n    CdataEnd: new Uint8Array([\n        0x5d,\n        0x5d,\n        0x3e\n    ]),\n    CommentEnd: new Uint8Array([\n        0x2d,\n        0x2d,\n        0x3e\n    ]),\n    ScriptEnd: new Uint8Array([\n        0x3c,\n        0x2f,\n        0x73,\n        0x63,\n        0x72,\n        0x69,\n        0x70,\n        0x74\n    ]),\n    StyleEnd: new Uint8Array([\n        0x3c,\n        0x2f,\n        0x73,\n        0x74,\n        0x79,\n        0x6c,\n        0x65\n    ]),\n    TitleEnd: new Uint8Array([\n        0x3c,\n        0x2f,\n        0x74,\n        0x69,\n        0x74,\n        0x6c,\n        0x65\n    ])\n};\nvar Tokenizer = /** @class */ function() {\n    function Tokenizer(_a, cbs) {\n        var _b = _a.xmlMode, xmlMode = _b === void 0 ? false : _b, _c = _a.decodeEntities, decodeEntities = _c === void 0 ? true : _c;\n        this.cbs = cbs;\n        /** The current state the tokenizer is in. */ this.state = State.Text;\n        /** The read buffer. */ this.buffer = \"\";\n        /** The beginning of the section that is currently being read. */ this.sectionStart = 0;\n        /** The index within the buffer that we are currently looking at. */ this.index = 0;\n        /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */ this.baseState = State.Text;\n        /** For special parsing behavior inside of script and style tags. */ this.isSpecial = false;\n        /** Indicates whether the tokenizer has been paused. */ this.running = true;\n        /** The offset of the current buffer. */ this.offset = 0;\n        this.sequenceIndex = 0;\n        this.trieIndex = 0;\n        this.trieCurrent = 0;\n        /** For named entities, the index of the value. For numeric entities, the code point. */ this.entityResult = 0;\n        this.entityExcess = 0;\n        this.xmlMode = xmlMode;\n        this.decodeEntities = decodeEntities;\n        this.entityTrie = xmlMode ? decode_js_1.xmlDecodeTree : decode_js_1.htmlDecodeTree;\n    }\n    Tokenizer.prototype.reset = function() {\n        this.state = State.Text;\n        this.buffer = \"\";\n        this.sectionStart = 0;\n        this.index = 0;\n        this.baseState = State.Text;\n        this.currentSequence = undefined;\n        this.running = true;\n        this.offset = 0;\n    };\n    Tokenizer.prototype.write = function(chunk) {\n        this.offset += this.buffer.length;\n        this.buffer = chunk;\n        this.parse();\n    };\n    Tokenizer.prototype.end = function() {\n        if (this.running) this.finish();\n    };\n    Tokenizer.prototype.pause = function() {\n        this.running = false;\n    };\n    Tokenizer.prototype.resume = function() {\n        this.running = true;\n        if (this.index < this.buffer.length + this.offset) {\n            this.parse();\n        }\n    };\n    /**\n     * The current index within all of the written data.\n     */ Tokenizer.prototype.getIndex = function() {\n        return this.index;\n    };\n    /**\n     * The start of the current section.\n     */ Tokenizer.prototype.getSectionStart = function() {\n        return this.sectionStart;\n    };\n    Tokenizer.prototype.stateText = function(c) {\n        if (c === CharCodes.Lt || !this.decodeEntities && this.fastForwardTo(CharCodes.Lt)) {\n            if (this.index > this.sectionStart) {\n                this.cbs.ontext(this.sectionStart, this.index);\n            }\n            this.state = State.BeforeTagName;\n            this.sectionStart = this.index;\n        } else if (this.decodeEntities && c === CharCodes.Amp) {\n            this.state = State.BeforeEntity;\n        }\n    };\n    Tokenizer.prototype.stateSpecialStartSequence = function(c) {\n        var isEnd = this.sequenceIndex === this.currentSequence.length;\n        var isMatch = isEnd ? isEndOfTagSection(c) : (c | 0x20) === this.currentSequence[this.sequenceIndex];\n        if (!isMatch) {\n            this.isSpecial = false;\n        } else if (!isEnd) {\n            this.sequenceIndex++;\n            return;\n        }\n        this.sequenceIndex = 0;\n        this.state = State.InTagName;\n        this.stateInTagName(c);\n    };\n    /** Look for an end tag. For <title> tags, also decode entities. */ Tokenizer.prototype.stateInSpecialTag = function(c) {\n        if (this.sequenceIndex === this.currentSequence.length) {\n            if (c === CharCodes.Gt || isWhitespace(c)) {\n                var endOfText = this.index - this.currentSequence.length;\n                if (this.sectionStart < endOfText) {\n                    // Spoof the index so that reported locations match up.\n                    var actualIndex = this.index;\n                    this.index = endOfText;\n                    this.cbs.ontext(this.sectionStart, endOfText);\n                    this.index = actualIndex;\n                }\n                this.isSpecial = false;\n                this.sectionStart = endOfText + 2; // Skip over the `</`\n                this.stateInClosingTagName(c);\n                return; // We are done; skip the rest of the function.\n            }\n            this.sequenceIndex = 0;\n        }\n        if ((c | 0x20) === this.currentSequence[this.sequenceIndex]) {\n            this.sequenceIndex += 1;\n        } else if (this.sequenceIndex === 0) {\n            if (this.currentSequence === Sequences.TitleEnd) {\n                // We have to parse entities in <title> tags.\n                if (this.decodeEntities && c === CharCodes.Amp) {\n                    this.state = State.BeforeEntity;\n                }\n            } else if (this.fastForwardTo(CharCodes.Lt)) {\n                // Outside of <title> tags, we can fast-forward.\n                this.sequenceIndex = 1;\n            }\n        } else {\n            // If we see a `<`, set the sequence index to 1; useful for eg. `<</script>`.\n            this.sequenceIndex = Number(c === CharCodes.Lt);\n        }\n    };\n    Tokenizer.prototype.stateCDATASequence = function(c) {\n        if (c === Sequences.Cdata[this.sequenceIndex]) {\n            if (++this.sequenceIndex === Sequences.Cdata.length) {\n                this.state = State.InCommentLike;\n                this.currentSequence = Sequences.CdataEnd;\n                this.sequenceIndex = 0;\n                this.sectionStart = this.index + 1;\n            }\n        } else {\n            this.sequenceIndex = 0;\n            this.state = State.InDeclaration;\n            this.stateInDeclaration(c); // Reconsume the character\n        }\n    };\n    /**\n     * When we wait for one specific character, we can speed things up\n     * by skipping through the buffer until we find it.\n     *\n     * @returns Whether the character was found.\n     */ Tokenizer.prototype.fastForwardTo = function(c) {\n        while(++this.index < this.buffer.length + this.offset){\n            if (this.buffer.charCodeAt(this.index - this.offset) === c) {\n                return true;\n            }\n        }\n        /*\n         * We increment the index at the end of the `parse` loop,\n         * so set it to `buffer.length - 1` here.\n         *\n         * TODO: Refactor `parse` to increment index before calling states.\n         */ this.index = this.buffer.length + this.offset - 1;\n        return false;\n    };\n    /**\n     * Comments and CDATA end with `-->` and `]]>`.\n     *\n     * Their common qualities are:\n     * - Their end sequences have a distinct character they start with.\n     * - That character is then repeated, so we have to check multiple repeats.\n     * - All characters but the start character of the sequence can be skipped.\n     */ Tokenizer.prototype.stateInCommentLike = function(c) {\n        if (c === this.currentSequence[this.sequenceIndex]) {\n            if (++this.sequenceIndex === this.currentSequence.length) {\n                if (this.currentSequence === Sequences.CdataEnd) {\n                    this.cbs.oncdata(this.sectionStart, this.index, 2);\n                } else {\n                    this.cbs.oncomment(this.sectionStart, this.index, 2);\n                }\n                this.sequenceIndex = 0;\n                this.sectionStart = this.index + 1;\n                this.state = State.Text;\n            }\n        } else if (this.sequenceIndex === 0) {\n            // Fast-forward to the first character of the sequence\n            if (this.fastForwardTo(this.currentSequence[0])) {\n                this.sequenceIndex = 1;\n            }\n        } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {\n            // Allow long sequences, eg. --->, ]]]>\n            this.sequenceIndex = 0;\n        }\n    };\n    /**\n     * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.\n     *\n     * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).\n     * We allow anything that wouldn't end the tag.\n     */ Tokenizer.prototype.isTagStartChar = function(c) {\n        return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);\n    };\n    Tokenizer.prototype.startSpecial = function(sequence, offset) {\n        this.isSpecial = true;\n        this.currentSequence = sequence;\n        this.sequenceIndex = offset;\n        this.state = State.SpecialStartSequence;\n    };\n    Tokenizer.prototype.stateBeforeTagName = function(c) {\n        if (c === CharCodes.ExclamationMark) {\n            this.state = State.BeforeDeclaration;\n            this.sectionStart = this.index + 1;\n        } else if (c === CharCodes.Questionmark) {\n            this.state = State.InProcessingInstruction;\n            this.sectionStart = this.index + 1;\n        } else if (this.isTagStartChar(c)) {\n            var lower = c | 0x20;\n            this.sectionStart = this.index;\n            if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {\n                this.startSpecial(Sequences.TitleEnd, 3);\n            } else {\n                this.state = !this.xmlMode && lower === Sequences.ScriptEnd[2] ? State.BeforeSpecialS : State.InTagName;\n            }\n        } else if (c === CharCodes.Slash) {\n            this.state = State.BeforeClosingTagName;\n        } else {\n            this.state = State.Text;\n            this.stateText(c);\n        }\n    };\n    Tokenizer.prototype.stateInTagName = function(c) {\n        if (isEndOfTagSection(c)) {\n            this.cbs.onopentagname(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.state = State.BeforeAttributeName;\n            this.stateBeforeAttributeName(c);\n        }\n    };\n    Tokenizer.prototype.stateBeforeClosingTagName = function(c) {\n        if (isWhitespace(c)) {\n        // Ignore\n        } else if (c === CharCodes.Gt) {\n            this.state = State.Text;\n        } else {\n            this.state = this.isTagStartChar(c) ? State.InClosingTagName : State.InSpecialComment;\n            this.sectionStart = this.index;\n        }\n    };\n    Tokenizer.prototype.stateInClosingTagName = function(c) {\n        if (c === CharCodes.Gt || isWhitespace(c)) {\n            this.cbs.onclosetag(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.state = State.AfterClosingTagName;\n            this.stateAfterClosingTagName(c);\n        }\n    };\n    Tokenizer.prototype.stateAfterClosingTagName = function(c) {\n        // Skip everything until \">\"\n        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n            this.state = State.Text;\n            this.sectionStart = this.index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeAttributeName = function(c) {\n        if (c === CharCodes.Gt) {\n            this.cbs.onopentagend(this.index);\n            if (this.isSpecial) {\n                this.state = State.InSpecialTag;\n                this.sequenceIndex = 0;\n            } else {\n                this.state = State.Text;\n            }\n            this.baseState = this.state;\n            this.sectionStart = this.index + 1;\n        } else if (c === CharCodes.Slash) {\n            this.state = State.InSelfClosingTag;\n        } else if (!isWhitespace(c)) {\n            this.state = State.InAttributeName;\n            this.sectionStart = this.index;\n        }\n    };\n    Tokenizer.prototype.stateInSelfClosingTag = function(c) {\n        if (c === CharCodes.Gt) {\n            this.cbs.onselfclosingtag(this.index);\n            this.state = State.Text;\n            this.baseState = State.Text;\n            this.sectionStart = this.index + 1;\n            this.isSpecial = false; // Reset special state, in case of self-closing special tags\n        } else if (!isWhitespace(c)) {\n            this.state = State.BeforeAttributeName;\n            this.stateBeforeAttributeName(c);\n        }\n    };\n    Tokenizer.prototype.stateInAttributeName = function(c) {\n        if (c === CharCodes.Eq || isEndOfTagSection(c)) {\n            this.cbs.onattribname(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.state = State.AfterAttributeName;\n            this.stateAfterAttributeName(c);\n        }\n    };\n    Tokenizer.prototype.stateAfterAttributeName = function(c) {\n        if (c === CharCodes.Eq) {\n            this.state = State.BeforeAttributeValue;\n        } else if (c === CharCodes.Slash || c === CharCodes.Gt) {\n            this.cbs.onattribend(QuoteType.NoValue, this.index);\n            this.state = State.BeforeAttributeName;\n            this.stateBeforeAttributeName(c);\n        } else if (!isWhitespace(c)) {\n            this.cbs.onattribend(QuoteType.NoValue, this.index);\n            this.state = State.InAttributeName;\n            this.sectionStart = this.index;\n        }\n    };\n    Tokenizer.prototype.stateBeforeAttributeValue = function(c) {\n        if (c === CharCodes.DoubleQuote) {\n            this.state = State.InAttributeValueDq;\n            this.sectionStart = this.index + 1;\n        } else if (c === CharCodes.SingleQuote) {\n            this.state = State.InAttributeValueSq;\n            this.sectionStart = this.index + 1;\n        } else if (!isWhitespace(c)) {\n            this.sectionStart = this.index;\n            this.state = State.InAttributeValueNq;\n            this.stateInAttributeValueNoQuotes(c); // Reconsume token\n        }\n    };\n    Tokenizer.prototype.handleInAttributeValue = function(c, quote) {\n        if (c === quote || !this.decodeEntities && this.fastForwardTo(quote)) {\n            this.cbs.onattribdata(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.cbs.onattribend(quote === CharCodes.DoubleQuote ? QuoteType.Double : QuoteType.Single, this.index);\n            this.state = State.BeforeAttributeName;\n        } else if (this.decodeEntities && c === CharCodes.Amp) {\n            this.baseState = this.state;\n            this.state = State.BeforeEntity;\n        }\n    };\n    Tokenizer.prototype.stateInAttributeValueDoubleQuotes = function(c) {\n        this.handleInAttributeValue(c, CharCodes.DoubleQuote);\n    };\n    Tokenizer.prototype.stateInAttributeValueSingleQuotes = function(c) {\n        this.handleInAttributeValue(c, CharCodes.SingleQuote);\n    };\n    Tokenizer.prototype.stateInAttributeValueNoQuotes = function(c) {\n        if (isWhitespace(c) || c === CharCodes.Gt) {\n            this.cbs.onattribdata(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.cbs.onattribend(QuoteType.Unquoted, this.index);\n            this.state = State.BeforeAttributeName;\n            this.stateBeforeAttributeName(c);\n        } else if (this.decodeEntities && c === CharCodes.Amp) {\n            this.baseState = this.state;\n            this.state = State.BeforeEntity;\n        }\n    };\n    Tokenizer.prototype.stateBeforeDeclaration = function(c) {\n        if (c === CharCodes.OpeningSquareBracket) {\n            this.state = State.CDATASequence;\n            this.sequenceIndex = 0;\n        } else {\n            this.state = c === CharCodes.Dash ? State.BeforeComment : State.InDeclaration;\n        }\n    };\n    Tokenizer.prototype.stateInDeclaration = function(c) {\n        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n            this.cbs.ondeclaration(this.sectionStart, this.index);\n            this.state = State.Text;\n            this.sectionStart = this.index + 1;\n        }\n    };\n    Tokenizer.prototype.stateInProcessingInstruction = function(c) {\n        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n            this.cbs.onprocessinginstruction(this.sectionStart, this.index);\n            this.state = State.Text;\n            this.sectionStart = this.index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeComment = function(c) {\n        if (c === CharCodes.Dash) {\n            this.state = State.InCommentLike;\n            this.currentSequence = Sequences.CommentEnd;\n            // Allow short comments (eg. <!-->)\n            this.sequenceIndex = 2;\n            this.sectionStart = this.index + 1;\n        } else {\n            this.state = State.InDeclaration;\n        }\n    };\n    Tokenizer.prototype.stateInSpecialComment = function(c) {\n        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n            this.cbs.oncomment(this.sectionStart, this.index, 0);\n            this.state = State.Text;\n            this.sectionStart = this.index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeSpecialS = function(c) {\n        var lower = c | 0x20;\n        if (lower === Sequences.ScriptEnd[3]) {\n            this.startSpecial(Sequences.ScriptEnd, 4);\n        } else if (lower === Sequences.StyleEnd[3]) {\n            this.startSpecial(Sequences.StyleEnd, 4);\n        } else {\n            this.state = State.InTagName;\n            this.stateInTagName(c); // Consume the token again\n        }\n    };\n    Tokenizer.prototype.stateBeforeEntity = function(c) {\n        // Start excess with 1 to include the '&'\n        this.entityExcess = 1;\n        this.entityResult = 0;\n        if (c === CharCodes.Num) {\n            this.state = State.BeforeNumericEntity;\n        } else if (c === CharCodes.Amp) {\n        // We have two `&` characters in a row. Stay in the current state.\n        } else {\n            this.trieIndex = 0;\n            this.trieCurrent = this.entityTrie[0];\n            this.state = State.InNamedEntity;\n            this.stateInNamedEntity(c);\n        }\n    };\n    Tokenizer.prototype.stateInNamedEntity = function(c) {\n        this.entityExcess += 1;\n        this.trieIndex = (0, decode_js_1.determineBranch)(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c);\n        if (this.trieIndex < 0) {\n            this.emitNamedEntity();\n            this.index--;\n            return;\n        }\n        this.trieCurrent = this.entityTrie[this.trieIndex];\n        var masked = this.trieCurrent & decode_js_1.BinTrieFlags.VALUE_LENGTH;\n        // If the branch is a value, store it and continue\n        if (masked) {\n            // The mask is the number of bytes of the value, including the current byte.\n            var valueLength = (masked >> 14) - 1;\n            // If we have a legacy entity while parsing strictly, just skip the number of bytes\n            if (!this.allowLegacyEntity() && c !== CharCodes.Semi) {\n                this.trieIndex += valueLength;\n            } else {\n                // Add 1 as we have already incremented the excess\n                var entityStart = this.index - this.entityExcess + 1;\n                if (entityStart > this.sectionStart) {\n                    this.emitPartial(this.sectionStart, entityStart);\n                }\n                // If this is a surrogate pair, consume the next two bytes\n                this.entityResult = this.trieIndex;\n                this.trieIndex += valueLength;\n                this.entityExcess = 0;\n                this.sectionStart = this.index + 1;\n                if (valueLength === 0) {\n                    this.emitNamedEntity();\n                }\n            }\n        }\n    };\n    Tokenizer.prototype.emitNamedEntity = function() {\n        this.state = this.baseState;\n        if (this.entityResult === 0) {\n            return;\n        }\n        var valueLength = (this.entityTrie[this.entityResult] & decode_js_1.BinTrieFlags.VALUE_LENGTH) >> 14;\n        switch(valueLength){\n            case 1:\n                this.emitCodePoint(this.entityTrie[this.entityResult] & ~decode_js_1.BinTrieFlags.VALUE_LENGTH);\n                break;\n            case 2:\n                this.emitCodePoint(this.entityTrie[this.entityResult + 1]);\n                break;\n            case 3:\n                {\n                    this.emitCodePoint(this.entityTrie[this.entityResult + 1]);\n                    this.emitCodePoint(this.entityTrie[this.entityResult + 2]);\n                }\n        }\n    };\n    Tokenizer.prototype.stateBeforeNumericEntity = function(c) {\n        if ((c | 0x20) === CharCodes.LowerX) {\n            this.entityExcess++;\n            this.state = State.InHexEntity;\n        } else {\n            this.state = State.InNumericEntity;\n            this.stateInNumericEntity(c);\n        }\n    };\n    Tokenizer.prototype.emitNumericEntity = function(strict) {\n        var entityStart = this.index - this.entityExcess - 1;\n        var numberStart = entityStart + 2 + Number(this.state === State.InHexEntity);\n        if (numberStart !== this.index) {\n            // Emit leading data if any\n            if (entityStart > this.sectionStart) {\n                this.emitPartial(this.sectionStart, entityStart);\n            }\n            this.sectionStart = this.index + Number(strict);\n            this.emitCodePoint((0, decode_js_1.replaceCodePoint)(this.entityResult));\n        }\n        this.state = this.baseState;\n    };\n    Tokenizer.prototype.stateInNumericEntity = function(c) {\n        if (c === CharCodes.Semi) {\n            this.emitNumericEntity(true);\n        } else if (isNumber(c)) {\n            this.entityResult = this.entityResult * 10 + (c - CharCodes.Zero);\n            this.entityExcess++;\n        } else {\n            if (this.allowLegacyEntity()) {\n                this.emitNumericEntity(false);\n            } else {\n                this.state = this.baseState;\n            }\n            this.index--;\n        }\n    };\n    Tokenizer.prototype.stateInHexEntity = function(c) {\n        if (c === CharCodes.Semi) {\n            this.emitNumericEntity(true);\n        } else if (isNumber(c)) {\n            this.entityResult = this.entityResult * 16 + (c - CharCodes.Zero);\n            this.entityExcess++;\n        } else if (isHexDigit(c)) {\n            this.entityResult = this.entityResult * 16 + ((c | 0x20) - CharCodes.LowerA + 10);\n            this.entityExcess++;\n        } else {\n            if (this.allowLegacyEntity()) {\n                this.emitNumericEntity(false);\n            } else {\n                this.state = this.baseState;\n            }\n            this.index--;\n        }\n    };\n    Tokenizer.prototype.allowLegacyEntity = function() {\n        return !this.xmlMode && (this.baseState === State.Text || this.baseState === State.InSpecialTag);\n    };\n    /**\n     * Remove data that has already been consumed from the buffer.\n     */ Tokenizer.prototype.cleanup = function() {\n        // If we are inside of text or attributes, emit what we already have.\n        if (this.running && this.sectionStart !== this.index) {\n            if (this.state === State.Text || this.state === State.InSpecialTag && this.sequenceIndex === 0) {\n                this.cbs.ontext(this.sectionStart, this.index);\n                this.sectionStart = this.index;\n            } else if (this.state === State.InAttributeValueDq || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueNq) {\n                this.cbs.onattribdata(this.sectionStart, this.index);\n                this.sectionStart = this.index;\n            }\n        }\n    };\n    Tokenizer.prototype.shouldContinue = function() {\n        return this.index < this.buffer.length + this.offset && this.running;\n    };\n    /**\n     * Iterates through the buffer, calling the function corresponding to the current state.\n     *\n     * States that are more likely to be hit are higher up, as a performance improvement.\n     */ Tokenizer.prototype.parse = function() {\n        while(this.shouldContinue()){\n            var c = this.buffer.charCodeAt(this.index - this.offset);\n            if (this.state === State.Text) {\n                this.stateText(c);\n            } else if (this.state === State.SpecialStartSequence) {\n                this.stateSpecialStartSequence(c);\n            } else if (this.state === State.InSpecialTag) {\n                this.stateInSpecialTag(c);\n            } else if (this.state === State.CDATASequence) {\n                this.stateCDATASequence(c);\n            } else if (this.state === State.InAttributeValueDq) {\n                this.stateInAttributeValueDoubleQuotes(c);\n            } else if (this.state === State.InAttributeName) {\n                this.stateInAttributeName(c);\n            } else if (this.state === State.InCommentLike) {\n                this.stateInCommentLike(c);\n            } else if (this.state === State.InSpecialComment) {\n                this.stateInSpecialComment(c);\n            } else if (this.state === State.BeforeAttributeName) {\n                this.stateBeforeAttributeName(c);\n            } else if (this.state === State.InTagName) {\n                this.stateInTagName(c);\n            } else if (this.state === State.InClosingTagName) {\n                this.stateInClosingTagName(c);\n            } else if (this.state === State.BeforeTagName) {\n                this.stateBeforeTagName(c);\n            } else if (this.state === State.AfterAttributeName) {\n                this.stateAfterAttributeName(c);\n            } else if (this.state === State.InAttributeValueSq) {\n                this.stateInAttributeValueSingleQuotes(c);\n            } else if (this.state === State.BeforeAttributeValue) {\n                this.stateBeforeAttributeValue(c);\n            } else if (this.state === State.BeforeClosingTagName) {\n                this.stateBeforeClosingTagName(c);\n            } else if (this.state === State.AfterClosingTagName) {\n                this.stateAfterClosingTagName(c);\n            } else if (this.state === State.BeforeSpecialS) {\n                this.stateBeforeSpecialS(c);\n            } else if (this.state === State.InAttributeValueNq) {\n                this.stateInAttributeValueNoQuotes(c);\n            } else if (this.state === State.InSelfClosingTag) {\n                this.stateInSelfClosingTag(c);\n            } else if (this.state === State.InDeclaration) {\n                this.stateInDeclaration(c);\n            } else if (this.state === State.BeforeDeclaration) {\n                this.stateBeforeDeclaration(c);\n            } else if (this.state === State.BeforeComment) {\n                this.stateBeforeComment(c);\n            } else if (this.state === State.InProcessingInstruction) {\n                this.stateInProcessingInstruction(c);\n            } else if (this.state === State.InNamedEntity) {\n                this.stateInNamedEntity(c);\n            } else if (this.state === State.BeforeEntity) {\n                this.stateBeforeEntity(c);\n            } else if (this.state === State.InHexEntity) {\n                this.stateInHexEntity(c);\n            } else if (this.state === State.InNumericEntity) {\n                this.stateInNumericEntity(c);\n            } else {\n                // `this._state === State.BeforeNumericEntity`\n                this.stateBeforeNumericEntity(c);\n            }\n            this.index++;\n        }\n        this.cleanup();\n    };\n    Tokenizer.prototype.finish = function() {\n        if (this.state === State.InNamedEntity) {\n            this.emitNamedEntity();\n        }\n        // If there is remaining data, emit it in a reasonable way\n        if (this.sectionStart < this.index) {\n            this.handleTrailingData();\n        }\n        this.cbs.onend();\n    };\n    /** Handle any trailing data. */ Tokenizer.prototype.handleTrailingData = function() {\n        var endIndex = this.buffer.length + this.offset;\n        if (this.state === State.InCommentLike) {\n            if (this.currentSequence === Sequences.CdataEnd) {\n                this.cbs.oncdata(this.sectionStart, endIndex, 0);\n            } else {\n                this.cbs.oncomment(this.sectionStart, endIndex, 0);\n            }\n        } else if (this.state === State.InNumericEntity && this.allowLegacyEntity()) {\n            this.emitNumericEntity(false);\n        // All trailing data will have been consumed\n        } else if (this.state === State.InHexEntity && this.allowLegacyEntity()) {\n            this.emitNumericEntity(false);\n        // All trailing data will have been consumed\n        } else if (this.state === State.InTagName || this.state === State.BeforeAttributeName || this.state === State.BeforeAttributeValue || this.state === State.AfterAttributeName || this.state === State.InAttributeName || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueDq || this.state === State.InAttributeValueNq || this.state === State.InClosingTagName) {\n        /*\n             * If we are currently in an opening or closing tag, us not calling the\n             * respective callback signals that the tag should be ignored.\n             */ } else {\n            this.cbs.ontext(this.sectionStart, endIndex);\n        }\n    };\n    Tokenizer.prototype.emitPartial = function(start, endIndex) {\n        if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {\n            this.cbs.onattribdata(start, endIndex);\n        } else {\n            this.cbs.ontext(start, endIndex);\n        }\n    };\n    Tokenizer.prototype.emitCodePoint = function(cp) {\n        if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {\n            this.cbs.onattribentity(cp);\n        } else {\n            this.cbs.ontextentity(cp);\n        }\n    };\n    return Tokenizer;\n}();\nexports[\"default\"] = Tokenizer; //# sourceMappingURL=Tokenizer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/html-dom-parser/node_modules/htmlparser2/lib/Tokenizer.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/html-dom-parser/node_modules/htmlparser2/lib/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/html-dom-parser/node_modules/htmlparser2/lib/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DefaultHandler = exports.DomUtils = exports.parseFeed = exports.getFeed = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.parseDOM = exports.parseDocument = exports.DomHandler = exports.Parser = void 0;\nvar Parser_js_1 = __webpack_require__(/*! ./Parser.js */ \"(action-browser)/./node_modules/html-dom-parser/node_modules/htmlparser2/lib/Parser.js\");\nObject.defineProperty(exports, \"Parser\", ({\n    enumerable: true,\n    get: function() {\n        return Parser_js_1.Parser;\n    }\n}));\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"(action-browser)/./node_modules/domhandler/lib/index.js\");\nObject.defineProperty(exports, \"DomHandler\", ({\n    enumerable: true,\n    get: function() {\n        return domhandler_1.DomHandler;\n    }\n}));\nObject.defineProperty(exports, \"DefaultHandler\", ({\n    enumerable: true,\n    get: function() {\n        return domhandler_1.DomHandler;\n    }\n}));\n// Helper methods\n/**\n * Parses the data, returns the resulting document.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n */ function parseDocument(data, options) {\n    var handler = new domhandler_1.DomHandler(undefined, options);\n    new Parser_js_1.Parser(handler, options).end(data);\n    return handler.root;\n}\nexports.parseDocument = parseDocument;\n/**\n * Parses data, returns an array of the root nodes.\n *\n * Note that the root nodes still have a `Document` node as their parent.\n * Use `parseDocument` to get the `Document` node instead.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n * @deprecated Use `parseDocument` instead.\n */ function parseDOM(data, options) {\n    return parseDocument(data, options).children;\n}\nexports.parseDOM = parseDOM;\n/**\n * Creates a parser instance, with an attached DOM handler.\n *\n * @param cb A callback that will be called once parsing has been completed.\n * @param options Optional options for the parser and DOM builder.\n * @param elementCb An optional callback that will be called every time a tag has been completed inside of the DOM.\n */ function createDomStream(cb, options, elementCb) {\n    var handler = new domhandler_1.DomHandler(cb, options, elementCb);\n    return new Parser_js_1.Parser(handler, options);\n}\nexports.createDomStream = createDomStream;\nvar Tokenizer_js_1 = __webpack_require__(/*! ./Tokenizer.js */ \"(action-browser)/./node_modules/html-dom-parser/node_modules/htmlparser2/lib/Tokenizer.js\");\nObject.defineProperty(exports, \"Tokenizer\", ({\n    enumerable: true,\n    get: function() {\n        return __importDefault(Tokenizer_js_1).default;\n    }\n}));\n/*\n * All of the following exports exist for backwards-compatibility.\n * They should probably be removed eventually.\n */ var ElementType = __importStar(__webpack_require__(/*! domelementtype */ \"(action-browser)/./node_modules/domelementtype/lib/index.js\"));\nexports.ElementType = ElementType;\nvar domutils_1 = __webpack_require__(/*! domutils */ \"(action-browser)/./node_modules/domutils/lib/index.js\");\nObject.defineProperty(exports, \"getFeed\", ({\n    enumerable: true,\n    get: function() {\n        return domutils_1.getFeed;\n    }\n}));\n/**\n * Parse a feed.\n *\n * @param feed The feed that should be parsed, as a string.\n * @param options Optionally, options for parsing. When using this, you should set `xmlMode` to `true`.\n */ function parseFeed(feed, options) {\n    if (options === void 0) {\n        options = {\n            xmlMode: true\n        };\n    }\n    return (0, domutils_1.getFeed)(parseDOM(feed, options));\n}\nexports.parseFeed = parseFeed;\nexports.DomUtils = __importStar(__webpack_require__(/*! domutils */ \"(action-browser)/./node_modules/domutils/lib/index.js\")); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/html-dom-parser/node_modules/htmlparser2/lib/index.js\n");

/***/ })

};
;